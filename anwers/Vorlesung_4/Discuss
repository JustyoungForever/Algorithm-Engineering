In der nebenläufigen Programmierung bezieht sich "Lock-free" normalerweise auf Datenstrukturen oder Algorithmen, die keine gegenseitigen Ausschlussmechanismen verwenden, um Thread- und Interruptsicherheit zu gewährleisten. 
Lock-free-Operationen bieten eine Fortschrittsgarantie, was bedeutet, dass mindestens ein Thread innerhalb einer bestimmten Zeit Fortschritte machen wird. Diese Operationen blockieren keine anderen Threads, 
was die Gesamtleistung verbessern kann, aber sie müssen möglicherweise auf Erfolg überprüfen und erneut versuchen.


Eine lock-free Datenstruktur kann verwendet werden, um die Leistung zu steigern. 
Eine solche Datenstruktur erhöht die Zeit der parallelen Ausführung im Vergleich zur seriellen Ausführung und verbessert dadurch die Leistung auf einem Mehrkernprozessor, 
da der Zugriff auf die gemeinsam genutzte Datenstruktur nicht serialisiert werden muss, um kohärent zu bleiben.

Lock-free Algorithmen gelten als wichtige Alternative zu blockierungsfreien (lock-based) nebenläufigen Datenstrukturen. 
Darüber hinaus gibt es Begriffe wie blockierungsfrei (obstruction-free) und wartefrei (wait-free), die ähnliche Konzepte beschreiben.

obstruction-free：

class Counter {
    private int count = 0;
    private final Object lock = new Object();

    public void increment() {
        synchronized(lock) {
            count++;
        }
    }

    public int getCount() {
        synchronized(lock) {
            return count;
        }
    }
}

Lock-free：

import java.util.concurrent.atomic.AtomicInteger;

class Counter {
    private AtomicInteger count = new AtomicInteger(0);

    public void increment() {
        count.incrementAndGet();
    }

    public int getCount() {
        return count.get();
    }
}
